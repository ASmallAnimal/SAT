/*
 * 基于SAT的数独求解
 */

/*
 * 任务要求
 * 1. 输入输出功能：包括程序执行参数的输入，SAT算例cnf文件的读取，执行结果的输出与文件保存等。(15%)
 * 2. 读取cnf算例文件，解析文件，基于一定的物理结构，建立公式的内部表示；并实现对解析正确性的验证功能，即遍历内部结构逐行输出与显示每个子句，与输入算例对比可人工判断解析功能的正确性。
 * 3. DPLL过程：基于DPLL算法框架，实现SAT算例的求解。
 * 4. 时间性能的测量：基于相应的时间处理函数（参考time.h），记录DPLL过程执行时间（以毫秒为单位），并作为输出信息的一部分。(5%)
 * 5. 程序优化：对基本DPLL的实现进行存储结构、分支变元选取策略[1-3]等某一方面进行优化设计与实现，提供明确的性能优化率结果。优化率的计算公式为：[(t-to)/t]*100%,其中t 为未对DPLL优化时求解基准算例的执行时间，to则为优化DPLL实现时求解同一算例的执行时间。(15%)
 * 6. SAT应用：将二进制数独游戏问题转化为SAT问题，并集成到上面的求解器进行问题求解，游戏可玩，具有一定的/简单的交互性。应用问题归约为SAT问题的具体方法可参考文献[3]与[6-9]。（15%）
 */

/*
 * sudoku的要求
 * （1）在每一行、每一列中不允许有连续的3个1或3个0出现；（2）在每一行、每一列中1与0的个数相同；（3）不存在重复的行与重复的列。
 */

/*
 * 优化策略 真值的选取 以及 建立文字的索引 避免不必要的遍历查找
 */


#include <stdio.h>
#include "function.h"
#include "sat.h"
#include "Sudoku.h"

int main() {
    int op=1;
    while (op) {
        system("cls");
        printf("******\t\tSukudo\t\t******\n");
        printf("\t1. SAT\t 2. Sukudo\n");
        printf("\t0. 退出程序\n");
        printf("请输入对应功能前的数字：");
        scanf("%d", &op);
        if (op >= 0 && op <= 3 && !fmod(op, 1)) {
        switch (op) {
            case 1: SAT();
                break;
            case 2: Sudoku();
                break;
            case 0:
                printf("欢迎下次再使用本系统！\n");
                system("pause");
                exit(0);
        }} else {
            printf("输入错误！\n");
            getchar();
            getchar();
        }
    }
    return 0;
}//end of main()